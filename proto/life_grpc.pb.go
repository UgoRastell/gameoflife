// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: life.proto

package life

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameOfLife_StreamBoards_FullMethodName = "/life.GameOfLife/StreamBoards"
)

// GameOfLifeClient is the client API for GameOfLife service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ── Service : un plateau global 500×500, vues (viewport) par client ─────────
type GameOfLifeClient interface {
	StreamBoards(ctx context.Context, in *ViewportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Board], error)
}

type gameOfLifeClient struct {
	cc grpc.ClientConnInterface
}

func NewGameOfLifeClient(cc grpc.ClientConnInterface) GameOfLifeClient {
	return &gameOfLifeClient{cc}
}

func (c *gameOfLifeClient) StreamBoards(ctx context.Context, in *ViewportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Board], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameOfLife_ServiceDesc.Streams[0], GameOfLife_StreamBoards_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ViewportRequest, Board]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameOfLife_StreamBoardsClient = grpc.ServerStreamingClient[Board]

// GameOfLifeServer is the server API for GameOfLife service.
// All implementations must embed UnimplementedGameOfLifeServer
// for forward compatibility.
//
// ── Service : un plateau global 500×500, vues (viewport) par client ─────────
type GameOfLifeServer interface {
	StreamBoards(*ViewportRequest, grpc.ServerStreamingServer[Board]) error
	mustEmbedUnimplementedGameOfLifeServer()
}

// UnimplementedGameOfLifeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameOfLifeServer struct{}

func (UnimplementedGameOfLifeServer) StreamBoards(*ViewportRequest, grpc.ServerStreamingServer[Board]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBoards not implemented")
}
func (UnimplementedGameOfLifeServer) mustEmbedUnimplementedGameOfLifeServer() {}
func (UnimplementedGameOfLifeServer) testEmbeddedByValue()                    {}

// UnsafeGameOfLifeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameOfLifeServer will
// result in compilation errors.
type UnsafeGameOfLifeServer interface {
	mustEmbedUnimplementedGameOfLifeServer()
}

func RegisterGameOfLifeServer(s grpc.ServiceRegistrar, srv GameOfLifeServer) {
	// If the following call pancis, it indicates UnimplementedGameOfLifeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameOfLife_ServiceDesc, srv)
}

func _GameOfLife_StreamBoards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ViewportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameOfLifeServer).StreamBoards(m, &grpc.GenericServerStream[ViewportRequest, Board]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameOfLife_StreamBoardsServer = grpc.ServerStreamingServer[Board]

// GameOfLife_ServiceDesc is the grpc.ServiceDesc for GameOfLife service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameOfLife_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "life.GameOfLife",
	HandlerType: (*GameOfLifeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBoards",
			Handler:       _GameOfLife_StreamBoards_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "life.proto",
}
